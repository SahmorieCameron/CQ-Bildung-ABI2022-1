#### Widgets

# Definition: A widget is a graphical component on the screen
# (button, text label, drop down menu, scroll bar, image, etc...)
# GUIs are generated by combining different widgets and arranging them on the screen
# Default form of constructors in TKinter:
#    widget= <widgetname>(parent, attributes...) #parent = class for example

# Standard attributes

# background
# foreground
# height
# width
# state

# Attributes of Widgets in Tkinter

# Get values of widget attributes
#   Widget.cget(attribute)
#       Button1.cget("text")

# Set values of widget attribute:
#    Widget.config(attribut=word)
#       Button1.config(width =12 )

# Root

# The widget that contains nearly all other widgets (parent)
# Widgets generate a tree-like structure

# Hello WOrld
# import tkinter as tk

#
#
# class hello1:  # Define Class
#     def __init__(self, arg_Text):
#         self.root = (
#             tk.Tk()
#         )  # Setting up the root, empty frame where we can put our other widgets
#         self.w = tk.Label(
#             self.root, text=arg_Text, height=30, width=40, font=20, fg="blue"
#         )
#         self.w.pack()
#         self.root.mainloop()  # used to open the GUI
#
#
# hello1("Hold the cold one like he hold a old gun.")
#
#
# class hello2:  # Define Class
#     def __init__(self, arg_Text):
#         self.root = (
#             tk.Tk()
#         )  # Setting up the root, empty frame where we can put our other widgets
#         self.w = tk.Label(
#             self.root, text=arg_Text, height=30, width=40, font=20, fg="red"
#         )
#         self.w.pack()
#         self.root.mainloop()  # used to open the GUI
#
#
# hello2("Like he hold the microphone and stole the show for fun.")
#
#
# class hello3:  # Define Class
#     def __init__(self):
#         self.root = (
#             tk.Tk()
#         )  # Setting up the root, empty frame where we can put our other widgets
#         self.w = tk.Label(
#             self.root,
#             text="Hold the cold one like he hold a old gun.",
#             background="red",
#             height=30,
#             width=40,
#             font=20,
#             fg="blue",
#         )
#         self.w2 = tk.Label(
#             self.root,
#             text="Like he hold the microphone and stole the show for fun",
#             background="blue",
#             height=30,
#             width=40,
#             font=20,
#             fg="red",
#         )
#         self.w.pack()
#         self.w2.pack()
#         self.root.mainloop()  # used to open the GUI
#
#
# hello3()

#### Buttons

#
# class hello3:  # Define Class
#     def __init__(self):
#         self.root = (
#             tk.Tk()
#         )  # Setting up the root, empty frame where we can put our other widgets
#         self.w = tk.Label(
#             self.root,
#             text="Hold the cold one like he hold a old gun.",
#             background="red",
#             height=30,
#             width=100,
#             font=10,
#             fg="blue",
#         )
#         self.w2 = tk.Label(
#             self.root,
#             text="Like he hold the microphone and stole the show for fun",
#             background="blue",
#             height=50,
#             width=100,
#             font=10,
#             fg="red",
#         )
#         self.w.pack(side="left")
#         self.w2.pack()
#         self.button1 = tk.Button(self.root, text="Click Me", command=self.root.destroy)
#         self.button2 = tk.Button(
#             self.root,
#             text="remove me",
#             command=lambda: print("Fly you fools"),
#             fg="red",
#         )
#         self.button1.pack()
#         self.button2.pack()
#         self.root.mainloop()  # used to open the GUI
#
#
# hello3()


#### Inputs

# Widget for short inputs and outputs
# Saves his value in a specific variable

#### Varvars

# special variables in Tktinter
# saves the values of Inputs

# import tkinter as tk
# from tkinter import ttk
#
# # Creating a clickcounter
# class clickcounter:
#     def __init__(self):  # Constructor
#         self.root = tk.Tk()
#         self.count = 0
#         self.root.title("click counter")
#         # label
#         self.w = tk.Label(self.root, text=self.count)
#         # button
#         self.button2 = tk.Button(
#             self.root, text="Click Me", command=lambda: self.countup()
#         )
#         # stores the attributes in the class
#         self.w.pack()
#         self.button2.pack()
#
#         self.root.mainloop()
#
#     # Here is the function! Each time it is called, self.count increased by one-
#     # New value of self.count is written in my label (text=self.count)
#     # FUNCTIONS MUST NOT BE IN THE CONSTRUCTOR, WATCH THE TABS
#     def countup(self):
#         self.count += 1
#         self.w.config(
#             text=self.count
#         )  # config used to change attributes of label or button etc.
#
#
# clickcounter()


#### Text fields

# Widgets for displaying and editing bigger texts:
# Write Text:
# Widget.insert(position, string)

# Read text:
# Widget.get(position1, position2)

# The position has to be specifically formatted:

# Linenumber.Columnnumber
# z.b. 1.0 refers to the first line and the column

# Special position: END
# The current end of the text

# Delete text:
# Widget.delete(position1,position2)


#### Exercise 13 - Text fields

# Create a GUI that consists of a text field, five buttons and two labels.

# The Buttons should be able to :
# insert some text into your text field (one at the beginning and one at the end)
# clear the whole text fields
# print out the text into the terminal
# display how many characters the current text has in a labels

# The second label should be used to display which button was pressed last.
#
# import tkinter as tk
#
#
# class text_editor:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.text1 = tk.Text(self.root)
#         self.text1.pack()
#         self.button1 = tk.Button(
#             self.root, text="Get Contents", command=self.Text_Output
#         )
#         self.button2 = tk.Button(self.root, text="CLEAR", command=self.Text_Clear)
#         self.button3 = tk.Button(self.root, text="Line Starts", command=self.line_start)
#         self.button4 = tk.Button(self.root, text="Line Ends", command=self.line_end)
#         self.button5 = tk.Button(
#             self.root, text="Print to terminal", command=self.terminal
#         )
#         self.label1 = tk.Label(self.root, text="")
#         self.label1.pack(side="bottom")
#         self.button1.pack(side="left")
#         self.button2.pack(side="right")
#         self.button3.pack()
#         self.button4.pack()
#         self.button5.pack()
#         self.root.mainloop()
#
#     def Text_Output(self):
#         self.label1.config(
#             text="You're text has "
#             + str(len(self.text1.get(1.0, "end-1c")))
#             + " characters"
#         )
#
#     def Text_Clear(self):
#         self.text1.delete(1.0, "end")
#
#     def line_start(self):
#         self.text1.insert(1.0, "This text begins... \n")
#
#     def line_end(self):
#         self.text1.insert(30.0, "\n This text ends... \n")
#
#     def terminal(self):
#         self.Content = self.text1.get(1.0, "end")
#         self.label1.config(text="")
#         print(self.Content)
#
#
# text_editor()


#### Options menu

# # With Tkinter you are able do generate options menus by using source code like the following:
#
#
# #### Exercise 14 - Options menu
# # Create three menus
# # two should contain at least seven colours
# # one should contain at least seven of something else
#
# # use functions to change the background colour, text colour of a label and the text displayed in that the label corresponding to the chosen Options
#
# import tkinter as tk
#
#
# class Options:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("500x200")
#         self.var1 = tk.StringVar()
#         self.var1.set("Text Colour")
#         self.var2 = tk.StringVar()
#         self.var2.set("Background Colour")
#         self.var3 = tk.StringVar()
#         self.var3.set("Method")
#         self.menu1 = tk.OptionMenu(
#             self.root,
#             self.var1,
#             "Red",
#             "Orange",
#             "Yellow",
#             "Green",
#             "Blue",
#             "Indigo",
#             "Violet",
#             command=self.display_selected,
#         )
#         self.menu1.pack(side="left")
#         self.menu2 = tk.OptionMenu(
#             self.root,
#             self.var2,
#             "Red",
#             "Orange",
#             "Yellow",
#             "Green",
#             "Blue",
#             "Indigo",
#             "Violet",
#             command=self.display_selected,
#         )
#         self.menu2.pack(side="left")
#         self.menu3 = tk.OptionMenu(
#             self.root,
#             self.var3,
#             "Mix",
#             "Blend",
#             "Scatter",
#             "Swirl",
#             "Bind",
#             "Squish",
#             "Meld",
#             command=self.display_selected,
#         )
#         self.menu3.pack(side="left")
#
#         # create a label that dsisplays the text for our menu
#         self.label1 = tk.Label(self.root, text=self.var1.get())
#         self.label1.pack(side="left")
#         self.label2 = tk.Label(self.root, text=self.var2.get())
#         self.label2.pack(side="left")
#         self.root.mainloop()
#
#     def display_selected(self, choice):
#         choice1 = self.var1.get()
#         choice2 = self.var2.get()
#
#         print(choice)
#         self.label1.config(text=choice1)
#         self.label2.config(text=choice2)
#
#
# Options()

#### Check Boxes
# In tkinter Check Boxes are called Checkbuttons
# You can use them to generate True or False inputs from the user.
# They have to be combined with a Varvar of the type Boolean.

#### Exercise 15 - Checks

# Create a GUI with:
# 1 Button
# 5 Labels
# 5 Check buttons

# On button click the current status of the five CHeck buttons should be displayed in the corresponding label


# import tkinter as tk
#
#
# class Check:
#     def __init__(self):
#         self.root = tk.Tk()
#         # self.root.geometry("300x100")
#         #
#         self.checkValue1 = tk.BooleanVar()
#         self.checkValue1.set(True)
#         self.checkValue2 = tk.BooleanVar()
#         self.checkValue2.set(True)
#         self.checkValue3 = tk.BooleanVar()
#         self.checkValue3.set(True)
#         self.checkValue4 = tk.BooleanVar()
#         self.checkValue4.set(True)
#         self.checkValue5 = tk.BooleanVar()
#         self.checkValue5.set(True)
#         #
#         self.check1 = tk.Checkbutton(self.root, text="Check Box1", var=self.checkValue1)
#         self.check1.pack(side="left")
#         self.check2 = tk.Checkbutton(self.root, text="Check Box2", var=self.checkValue2)
#         self.check2.pack(side="left")
#         self.check3 = tk.Checkbutton(self.root, text="Check Box3", var=self.checkValue3)
#         self.check3.pack(side="left")
#         self.check4 = tk.Checkbutton(self.root, text="Check Box4", var=self.checkValue4)
#         self.check4.pack(side="left")
#         self.check5 = tk.Checkbutton(self.root, text="Check Box5", var=self.checkValue5)
#         self.check5.pack(side="left")
#         # now we create our button
#         self.button1 = tk.Button(
#             self.root,
#             text="Check your input",
#             width=80,
#             fg="blue",
#             bg="grey",
#             command=self.Print_Check,
#         )
#         self.button1.pack(side="right")
#         # labels
#         self.label1 = tk.Label(self.root, text="")
#         self.label1.pack(side="left")
#         self.label2 = tk.Label(self.root, text="")
#         self.label2.pack(side="left")
#         self.label3 = tk.Label(self.root, text="")
#         self.label3.pack(side="left")
#         self.label4 = tk.Label(self.root, text="")
#         self.label4.pack(side="left")
#         self.label5 = tk.Label(self.root, text="")
#         self.label5.pack(side="left")
#
#         self.root.mainloop()
#
#     def Print_Check(self):
#         Checking1 = self.checkValue1.get()
#         Checking2 = self.checkValue2.get()
#         Checking3 = self.checkValue3.get()
#         Checking4 = self.checkValue4.get()
#         Checking5 = self.checkValue5.get()
#         if Checking1 or Checking2 or Checking3 or Checking4 or Checking5:
#             print("A Check Box is activated")
#         else:
#             print("Check Boxes are not activated")
#         if Checking1:
#             print("Check Box 1 - Activated")
#             self.label1.config(text="Box 1 - Activated")
#         else:
#             self.label1.config(text="Box 1 - Not Active")
#
#         if Checking2:
#             print("Check Box 2 - Activated")
#             self.label2.config(text="Box 2 - Activated")
#         else:
#             self.label2.config(text="Box 2 - Not Active")
#         if Checking3:
#             print("Check Box 3 - Activated")
#             self.label3.config(text="Box 3 - Activated")
#         else:
#             self.label3.config(text="Box 3 - Not Active")
#         if Checking4:
#             print("Check Box 4 - Activated")
#             self.label4.config(text="Box 4 - Activated")
#         else:
#             self.label4.config(text="Box 4 - Not Active")
#         if Checking5:
#             print("Check Box 5 - Activated")
#             self.label5.config(text="Box 5 - Activated")
#         else:
#             self.label5.config(text="Box 4 - Not Active")
#
#
# Check()
#
# #### Radio Buttons
#
# # Are similar to check Buttons but can be grouped.
# # Have two states, checked or not checked.
# # from a group of Radio Buttons only one can be active at the same time
# Are grouped by using the same VarVar

# import tkinter as tk
#
#
# class Radio:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.var = tk.IntVar()
#         self.var.set(1)
#         self.label1 = tk.Label(self.root, text="Pick one of the following")
#         self.label1.pack()
#         self.radio1 = tk.Radiobutton(
#             self.root,
#             text="Python",
#             variable=self.var,
#             value=1,  # here it is an integer but can be a string
#             command=self.ShowChoice,
#         )
#         self.radio1.pack(anchor="top")
#         self.radio2 = tk.Radiobutton(
#             self.root, text="Perl", variable=self.var, value=2, command=self.ShowChoice,
#         )
#         self.radio2.pack(anchor="top")
#         self.radio3 = tk.Radiobutton(
#             self.root, text="Java", variable=self.var, value=3, command=self.ShowChoice,
#         )
#         self.radio3.pack(anchor="top")
#         self.radio4 = tk.Radiobutton(
#             self.root, text="C++", variable=self.var, value=4, command=self.ShowChoice,
#         )
#         self.radio4.pack(anchor="top")
#         self.root.mainloop()
#
#     def ShowChoice(self):
#         print(self.var.get())
#
#
# Radio()

#### Exercise 16 - Radio buttons

# Create two GUIs
# one wtih normal radio Buttons
# one with a button Box

# each should contain at least six radio Buttons
# create a function that is coupled with the Buttons for each GUI


# class Radio2:
#     def __init__(self):
#         # VARIABLES
#         self.root = tk.Tk()
#         self.var = tk.StringVar()
#         self.var.set("Wait time")
#         # LABELS
#         self.label1 = tk.Label(self.root, text="Wait time...")
#         self.label1.pack()
#         self.label2 = tk.Label(self.root, text="")
#         self.label2.pack()
#         self.radio1 = tk.Radiobutton(
#             self.root,
#             text="< 5minutes",
#             variable=self.var,
#             value="Under 5 minutes",  # here it is an integer but can be a string
#             command=self.ShowChoice,
#         )
#         self.radio1.pack(anchor="w")
#         self.radio2 = tk.Radiobutton(
#             self.root,
#             text="Roughly 10 minutes",
#             variable=self.var,
#             value="10",
#             command=self.ShowChoice,
#         )
#         self.radio2.pack(anchor="w")
#         self.radio3 = tk.Radiobutton(
#             self.root,
#             text="~ 15 mins",
#             variable=self.var,
#             value="Roughly 15 minutes",
#             command=self.ShowChoice,
#         )
#         self.radio3.pack(anchor="w")
#         #
#         self.radio4 = tk.Radiobutton(
#             self.root,
#             text="Roughly 20 mins",
#             variable=self.var,
#             value="20",
#             command=self.ShowChoice,
#         )
#         self.radio4.pack(anchor="w")
#         self.root.mainloop()
#
#     def ShowChoice(self):
#         print(self.var.get())
#         self.label2.config(text=self.var.get())
#
#
# Radio2()

#### List Box

# Displays multiple lines of one-line texts
# allows you to browse through them
# single and multi selections are possible

# Example 1
# import tkinter as tk
#
#
# class ListBox:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("200x100")
#         self.root.resizable(False, False)
#         self.root.title("Listbox")
#         self.langs = [
#             "Java",
#             "C#",
#             "C",
#             "C++",
#             "Python",
#             "Go",
#             "JavaScript",
#             "PHP",
#             "Swift",
#         ]
#         self.langs_var = tk.StringVar(value=self.langs)
#         self.listbox = tk.Listbox(self.root, listvariable=self.langs_var, height=6,)
#         self.listbox.bind("<<ListboxSelect>>", self.items_selected)
#         self.listbox.pack()
#         self.root.mainloop()
#
#     def items_selected(self, event):
#         selected_index = self.listbox.get(self.listbox.curselection())
#         print("You selected:", selected_index)
#
#
# ListBox()
#
# # Example 2
#
# import tkinter as tk
#
#
# class ListBox:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("200x100")
#         self.root.resizable(False, False)
#         self.root.title("Listbox")
#         self.langs = [
#             "Java",
#             "C#",
#             "C",
#             "C++",
#             "Python",
#             "Go",
#             "JavaScript",
#             "PHP",
#             "Swift",
#         ]
#         self.langs_var = tk.StringVar(value=self.langs)
#         self.listbox = tk.Listbox(
#             self.root,
#             listvariable=self.langs_var,
#             height=9,
#             selectmode="multiple",
#             selectbackground="blue",
#             selectforeground="snow",
#             activestyle="dotbox",
#         )
#         self.button1 = tk.Button(
#             self.root, text="Click Me", command=self.items_selected
#         )
#         self.listbox.pack(fill="both")
#         self.button1.pack()
#         self.root.mainloop()
#
#     def items_selected(self):
#         languages = []
#         selected_indices = self.listbox.curselection()
#         for i in selected_indices:
#             index = self.listbox.get(i)
#             languages.append(index)
#         for lang in languages:
#             print("You selected:", lang)
#
#
# ListBox()

#### Exercise 17 - List Box

# Create a GUI with a List Box
# First a single single selection
# Second multiple selections

# Display the chose entries in a Label
# First with bind
# For multiple selection with the help of a button.


# import tkinter as tk
#
#
# class ListBox:
#     def __init__(self):
#         self.root = tk.Tk()
#         # self.root.geometry("200x100") #this line here is used to create fixed box size
#         self.root.resizable(
#             False, False
#         )  # setting this argument to false means the box cannot be resized
#         #
#         self.root.title("Listbox")  # Title of our box
#         #
#         self.langs = [  # Setting the strings within our box
#             "Option 1",
#             "Option 2",
#             "Option 3",
#         ]
#         self.langs_var = tk.StringVar(
#             value=self.langs
#         )  # confirming our options within our box are strings
#         #
#         self.listbox = tk.Listbox(  # setting the attributes of our listbox object
#             self.root,
#             listvariable=self.langs_var,
#             height=10,
#             selectbackground="blue",
#             selectforeground="snow",
#         )
#         #
#         self.listbox.bind("<<ListboxSelect>>", self.items_selected)
#         self.listbox.pack()
#         self.root.mainloop()
#
#     def items_selected(self, event):
#         selected_index = self.listbox.get(self.listbox.curselection())
#         print("You selected:", selected_index)
#
#
# ListBox()
#
# import tkinter as tk
#
#
# class ListBox:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.resizable(False, False)
#         self.root.title("Listbox")
#         self.langs = [
#             "Option 1",
#             "Option 2",
#             "Option 3",
#         ]
#         self.langs_var = tk.StringVar(value=self.langs)
#         self.listbox = tk.Listbox(
#             self.root,
#             listvariable=self.langs_var,
#             height=9,
#             selectmode="multiple",
#             selectbackground="blue",
#             selectforeground="snow",
#             activestyle="dotbox",
#         )
#         self.button1 = tk.Button(
#             self.root, text="Click Me", command=self.items_selected
#         )
#         self.listbox.pack(fill="both")
#         self.button1.pack()
#         self.root.mainloop()
#
#     def items_selected(self):
#         languages = []
#         selected_indices = self.listbox.curselection()
#         for i in selected_indices:
#             index = self.listbox.get(i)
#             languages.append(index)
#         for lang in languages:
#             print("You selected:", lang)
#
#
# ListBox()

#### Scales

# mport tkinter as tk
#
# class Vertical:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("400x300")
#         self.v1 = tk.DoubleVar()
#         self.scale1 = tk.Scale(
#             self.root, variable=self.v1, from_=1, to=100, orient="vertical"
#         )
#         self.label1 = tk.Label(self.root, text="Horizontal Scaler")
#         self.button1 = tk.Button(
#             self.root, text="Display Vertical", command=self.show1, bg="yellow"
#         )
#         self.label2 = tk.Label(self.root)
#         self.scale1.pack(anchor="center")
#         self.label1.pack()
#         self.button1.pack(anchor="center")
#         self.label2.pack()
#         self.root.mainloop()
#
#     def show1(self):
#         sel = "Vertical Scale Value = " + str(self.v1.get())
#         self.label2.config(text=sel,)
#
#
# Vertical()
#
#
#
# import tkinter as tk
#
#
# class Horizontal:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("400x300")
#         self.v1 = tk.DoubleVar()
#         self.scale1 = tk.Scale(
#             self.root, variable=self.v1, from_=1, to=100, orient="horizontal"
#         )
#         self.label1 = tk.Label(self.root, text="Horizontal Scaler")
#         self.button1 = tk.Button(
#             self.root, text="Display Horizontal", command=self.show1, bg="yellow"
#         )
#         self.label2 = tk.Label(self.root)
#         self.scale1.pack(anchor="center")
#         self.label1.pack()
#         self.button1.pack(anchor="center")
#         self.label2.pack()
#         self.root.mainloop()
#
#     def show1(self):
#         sel = "Horizontal Scale Value = " + str(self.v1.get())
#         self.label2.config(text=sel,)
#
#
# Horizontal()


#### Exercise 18 - Two Scales

# Create GUI with two Scales
# One horizontal
# One Vertical

# DIsplay the chosen values of both scales in a label on the click of a button

# import tkinter as tk
#
#
# class Scales:
#     def __init__(self):
#         self.root = tk.Tk()
#
#         self.v1 = tk.DoubleVar()  #
#         self.v2 = tk.DoubleVar()
#         self.scale1 = tk.Scale(
#             self.root, variable=self.v1, from_=100, to=1, orient="vertical"
#         )
#         self.scale2 = tk.Scale(
#             self.root, variable=self.v2, from_=1, to=100, orient="horizontal"
#         )
#         self.label1 = tk.Label(self.root, text="Scales")
#         self.label2 = tk.Label(self.root, text="Values")
#         self.button1 = tk.Button(
#             self.root, text="Display", command=self.show1, bg="yellow"
#         )
#         self.label3 = tk.Label(self.root)
#         self.scale1.pack(anchor="center")
#         self.scale2.pack(anchor="center")
#
#         self.label1.pack()
#         self.button1.pack(anchor="center")
#         self.label2.pack()
#         self.label3.pack()
#         self.root.mainloop()
#
#     def show1(self):
#         sel = "Vertical Scale Value = " + str(self.v1.get())
#         sel2 = "Horizontal Scale Value = " + str(self.v2.get())
#         self.label2.config(text=sel)
#         self.label3.config(text=sel2)
#
#
# Scales()

#### Messages

# Similar to Labels
# But are more flexible in the display of text

# Generate line breaks automatically
# Font can be changed
# only during construction
# In labels the text is always displayed the same way

# import tkinter as tk
#
#
# class Message:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.whatever = "Whatever you do will be insignificant, but it is very important that you do it.\n(Mahatma Gandhi)"
#         self.msg = tk.Message(self.root, text=self.whatever)
#         self.msg.config(bg="lightgreen", font=("times", 24, "italic"))
#         self.msg.pack()
#         self.root.mainloop()
#
#
# Message()

#### Exericse 19 - Message Boxes
# Create a GUI with three message boxes
# each should have different formats and text of different lengths

# import tkinter as tk
#
#
# class Message:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.whatever1 = "Bah, can you dig it like a spigot? My guess is yes, you can, like 'Can I Kick It?'' Wicked)"
#         self.whatever2 = "Liquor shot if you happy and you know it. As you clap your hands to the thick snot of a poet flowin'"
#         self.whatever3 = "Grope a pen and I'm in cope hymen Doper rhymin' more worther than the Hope Diamond"
#
#         self.msg1 = tk.Message(self.root, text=self.whatever1)
#         self.msg2 = tk.Message(self.root, text=self.whatever2)
#         self.msg3 = tk.Message(self.root, text=self.whatever3)
#
#         self.msg1.config(bg="blue", font=("times", 21, "italic"))
#         self.msg2.config(bg="yellow", font=("calibri", 22, "bold"))
#         self.msg3.config(bg="orange", font=("ariel", 24, "italic"))
#
#         self.msg1.pack()
#         self.msg2.pack()
#         self.msg3.pack()
#
#         self.root.mainloop()
#
#
# Message()

#### Geometry Manager


#### Pack

# Illustration of Pack
#
# import tkinter as tk
#
#
# class pack_folien_layout:
#     def __init__(self):
#         self.root = tk.Tk()
#
#         # erstellung der widgets -
#         ####################### Ebene 1 #####################
#
#         self.gelb_oben = tk.Frame(self.root)
#         self.gruen = tk.Frame(self.root)
#         self.gelb_unten = tk.Frame(self.root)
#
#         ####################### Ebene 2 #####################
#
#         self.label8 = tk.Label(self.gelb_oben, text="Label 8")
#         self.rot = tk.Frame(self.gruen)
#         self.braun = tk.Frame(self.gruen)
#         self.label9 = tk.Label(self.gelb_unten, text="Label 9")
#
#         ####################### Ebene 3 #####################
#
#         self.button0 = tk.Button(self.rot, text="Button 0")
#         self.button1 = tk.Button(self.rot, text="Button 1")
#         self.button2 = tk.Button(self.rot, text="Button 2")
#         self.button3 = tk.Button(self.rot, text="Button 3")
#         self.button4 = tk.Button(self.rot, text="Button 4")
#
#         self.button5 = tk.Button(self.braun, text="Button 5")
#         self.button6 = tk.Button(self.braun, text="Button 6")
#         self.button7 = tk.Button(self.braun, text="Button 7")
#
#         ###################### Packen der Widgets ###########
#         ###################### Ebene 1 ######################
#
#         self.gelb_oben.pack()  # defaultwert: top
#         self.gruen.pack()
#         self.gelb_unten.pack()
#
#         ####################### Ebene 2 #####################
#
#         self.label8.pack()
#
#         self.rot.pack(side="left")
#         self.braun.pack(side="left")  # ,anchor="n"
#
#         self.label9.pack()
#
#         ####################### Ebene 3 #####################
#
#         self.button0.pack()
#         self.button1.pack()
#         self.button2.pack()
#         self.button3.pack()
#         self.button4.pack()
#
#         self.button5.pack()
#         self.button6.pack()
#         self.button7.pack()
#
#         self.root.mainloop()
#
#
# if __name__ == "__main__":
#     pack_folien_layout()

#### Grid

# Uses the concept of rows and columns to arrange Widgets
# Each field of the grid is accessible through the indices of the rows and columns
# Indices can have gaps and don't have to start at 0
#
# import tkinter as tk
# import random
#
#
# class Grid:
#     def __init__(self):
#         self.root = tk.Tk()
#         self.root.geometry("240x100")
#         self.root.title("Login")
#         self.root.resizable(0, 0)
#         #
#         self.root.columnconfigure(0, weight=1)
#         self.root.columnconfigure(1, weight=3)
#         #
#         self.username_label = tk.Label(self.root, text="Username:")
#         self.username_label.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
#
#         self.username_entry = tk.Entry(self.root)
#         self.username_entry.grid(column=1, row=0, sticky=tk.E, padx=5, pady=5)
#
#         self.password_label = tk.Label(self.root, text="Password:")
#         self.password_label.grid(column=0, row=1, sticky=tk.W, padx=5, pady=5)
#
#         self.password_entry = tk.Entry(self.root, show="*")
#         self.password_entry.grid(column=1, row=1, sticky=tk.E, padx=5, pady=5)
#
#         self.login_button = tk.Button(
#             self.root,
#             text="Login",
#             bg="#" + ("%06x" % random.randint(0, 16777215)),
#             fg="#" + ("%06x" % random.randint(0, 16777215)),
#         )
#         self.login_button.grid(
#             column=1, row=3, sticky=tk.E, padx=5, pady=5,
#         )
#
#         self.root.mainloop()
#
#
# Grid()
#
# #### Exercise 20 - Using Grid
#
# # Create a GUI with Grid
# # Include at least 10 different elements
# # needs 1 button with a functions
#
import tkinter as tk
import random


class Drumkit:
    def __init__(self):
        self.root = tk.Tk()
        # self.root.geometry("240x100")
        self.root.title("Drumkit")
        self.root.resizable(0, 0)
        #
        self.Kick_label1 = tk.Label(self.root, text="Kick:")
        self.Snare_label2 = tk.Label(self.root, text="Snare:")
        self.hat_label3 = tk.Label(self.root, text="Hi hat:")
        self.Percussion_label4 = tk.Label(self.root, text="Percussion:")
        self.label2 = tk.Label(self.root, text="")
        self.label2.pack()
        #
        self.Kick_label1.grid(column=0, row=0, sticky=tk.W, padx=5, pady=5)
        self.Snare_label2.grid(column=0, row=1, sticky=tk.W, padx=5, pady=5)
        self.hat_label3.grid(column=0, row=2, sticky=tk.W, padx=5, pady=5)
        self.Percussion_label4.grid(column=0, row=3, sticky=tk.W, padx=5, pady=5)
        #
        self.kick_button = tk.Button(
            self.root,
            text="Kick",
            bg="#" + ("%06x" % random.randint(0, 16777215)),
            fg="#" + ("%06x" % random.randint(0, 16777215)),
            command=self.kick,
        )

        self.kick_button.grid(
            column=1, row=0, sticky=tk.E, padx=5, pady=5,
        )
        self.snare_button = tk.Button(
            self.root,
            text="Snare",
            bg="#" + ("%06x" % random.randint(0, 16777215)),
            fg="#" + ("%06x" % random.randint(0, 16777215)),
            command=self.snare,
        )
        self.snare_button.grid(
            column=1, row=1, sticky=tk.E, padx=5, pady=5,
        )
        self.hats_button = tk.Button(
            self.root,
            text="Hats",
            bg="#" + ("%06x" % random.randint(0, 16777215)),
            fg="#" + ("%06x" % random.randint(0, 16777215)),
            command=self.hats,
        )
        self.hats_button.grid(
            column=1, row=2, sticky=tk.E, padx=5, pady=5,
        )
        self.percs_button = tk.Button(
            self.root,
            text="Percs",
            bg="#" + ("%06x" % random.randint(0, 16777215)),
            fg="#" + ("%06x" % random.randint(0, 16777215)),
            command=self.percs,
        )
        self.percs_button.grid(
            column=1, row=3, sticky=tk.E, padx=5, pady=5,
        )

        self.label1 = tk.Label(self.root, text=self.var1.get())
        self.label1.pack(side="right")

        self.root.mainloop()

    def kick(self):
        print("Kick")

    def snare(self):
        print("Snare")

    def hats(self):
        print("Hats")

    def percs(self):
        print("percs")

    def ShowChoice(self):
        print(self.var.get())

    def display_selected(self, choice):
        choice1 = self.var1.get()
        print(choice)
        self.label1.config(text=choice1)


Drumkit()
