#### Python Day 6 -- LOOOPS

# Loops are repeating source code...

# ... in most cases with different assignments of the control variables
# Mostly 2 types of Loop (in Python):
# For - Loops
# While - Loops
# Like branches are operated via predicates - e.g. true or false statements


#### For - Loop
# default parts:
# Running index (mostly int i)
# Starting assignment for i
# update for i in each Loop (AT THE START OF THE LOOP)

# NOT PYTHON CODE BELOW, PSEUDO CODE
# FOR (int i=0; i<iterations; i++)
# for = operator, int = initiator.
# "i" can be any string.
# i = running index.

# int i=0 = declaration of running indexed
# iterations = constant integer , condition, predicate bool.
# Then have to check whether i is smaller than the iterations.
# as long as this statement is true the loop will start.
# Then i++ is update of the running index, could also be written as i+1.
# BEGIN
# END

# In Python:
# Here is a standard loop

# for i in range(16)
#    instructions
#    instructions

# ^ i runs from 0 up to 15.
# updated automatically
# i increases with every iteration by 1.
# FUN FACT: In python, loops can run through lists.

# Uses of for Loops
# if you would normally say "from/to" or "for all" and you need a control variables
# if you know the number runs through the loops
# E.g. loop over an array
# If you want to run something for a certain number of times

# Factorial = 1
# for i in range(1, 5):
#     print(i)
#     Factorial = Factorial * i
#     print(Factorial)

# Loop will have 10 iterations
# can use For Loops for incremental ranges as Well
# e.g.

# for i in range(0, 24, 4):  # <- for all the elements that are contained in the list (in this case in the range defined), it will run the command below
#    print(i)

#### Exercise 23 - Your first Loops

# All following loops should run at least over a range from 0 to 21
# Write one loop that sums up all number in the set range
# Write another loop that sums up only the even numbers in the set range
# Write a third loop that generates a list that contains the values of the range in reverse order
# Print out all three results

# Sum of all numbers in a set range

# sum = 0
# for i in range(0, 22):
#     sum = sum + i
# print("The sum is " + str(sum))
#
# # Sums of the even numbers
# sum2 = 0
# for i in range(0, 22, 2):
#     sum2 = sum2 + i
# print("The sum of the even numbers is " + str(sum2))

# generates a list that contains the values of the range in reverse order
# list = []
# for i in reversed(range(0, 22)):
#     list += [i]
# print(list)

# alternatives to create lists (also within a loop)
# list.append(i)

#### "for each" Loops
# Python allows to loop through each entry of a list
# for elem in list:
#     instructions
#     instructions

# testlist = [2, 4, 67, 1, "Hello"]
# for elem in testlist:
#     print(elem)
#
# # to select only the "Hello"
# for elem in testlist:
#     if type(elem) == type("str"):
#         print(elem)

# prints out each element of the list in order.
# take one element at a time and perform the instructions on it.

#### Exercise 63
# Create a list that contains at least 20 different numbers that aren't sorted
# Don't use range for the generation of the list
# Write a loop that runs over all elements of the list and adds them all up

# Write a second loop that tells the user for each element,
# whether it is bigger or lower than a number specified by him
# This number should be generated by using input before the start of the loop

# Creating a randomly generated list
# import random
#
# # Generate 20 random numbers between 10 and 500
# randomlist = random.sample(range(10, 500), 20)
# print(randomlist)
#
# # 1 - loop that runs over all the elements of the list and adds them all up
# sum = 0
# for elem in randomlist:
#     sum = sum + elem  # sum += elem would also work
# print("The sum is " + str(sum))
# print()
# # 2 - Loop that tells the user whether their specified number is bigger or smaller
# userinput1 = int(input("Please specific a number: "))  # user generated number
# for elem in randomlist:
#     if userinput1 > elem:
#         print(elem)
#         print(userinput1)
#         print("Your number is bigger than this element")
#         print()
#     elif userinput1 < elem:
#         print(elem)
#         print(userinput1)
#         print("Your number is smaller than this element")
#         print()
#     elif userinput1 == elem:
#         print(elem)
#         print(userinput1)
#         print("This is your number")
#         print()
#     else:
#         ("Something's gone wrong...")


#### While Loops
# Used for when you don't know the number of iterations or repititions you need
# operated by a predicate
# repeated until predicate is no longer true
# e.g.
# while (predicate):
# instructions
# add up run_index

# whiletest = list(
#     range(12)
# )  # later we will work with loops which we don't know the length for.
# i = 0
# while i < len(
#     whiletest
# ):  # while the i variable is smaller than length of the whiletest variable run the loop!
#     print(whiletest[i])
#     i += 1  # have to manually update the running index like we do here!
# # Without it the loop would repeat endlessly because the i would never fulfil the parameters of the loop.
# # as soon as the statement (while i < len(whiletest)) is true, the loop stops.
#
# i = 0
# sum = 0
# while sum < 11:
#     sum += whiletest[i]
#     print(whiletest[i])
#     i += 1
# print(sum)


#### Exercise 24 - 3 while loops

# Write a program that uses while loops to finish the tasks below:
# Searching for a specific number (e.g. 5) in an integer list of unknown length
# Multiplying all elements of an integer list of unknown length
# Printing out the contents of a string list of unknown length elementwise

# Creating a randomly generated list
# import random
#
# # Generate 20 random numbers between 10 and 50
# randomlist = random.sample(range(0, 50), 20)
# print(randomlist)
#
# Found = False # this is used to make the second [if] arguement work
# i = 0
# print("Searching for a specific number (e.g. 5) in an integer list of unknown length")
# while i < len(randomlist): #while i variable is less than the length of our list, continue loop
#     if randomlist[i] == 5: # this is the loop, here if the current index of our list is 5 then....
#         print("5 is in the list") # perform this action
#         i += 1   #have to remember to increase the running index for a while loop
#         Found = True # boolean
#     else:
#         i += 1 #if the if argument is not true then it runs the loop again and increases the run index.
#                 #this is to prevent an infinite loop if 5 is not in our list.
# if not Found:
#     print("5 not in this list")
#
# print()
# print("Multiplying all elements of an integer list of unknown length")
# i = 0
# sum = 0
# while i < len(randomlist):
#     sum = sum + randomlist[i]
#     i += 1
# print(sum)
# print()
#
# print("Printing out the contents of a string list of unknown length elementwise")
# stringlist=["I","don't","know","how","this","is","possible",",","a","list","by","L'oreal"]
# i=0
# while i < len(stringlist):
#     print(stringlist[i])
#     i+=1

#### Nested Loops

# For(int i=0; i<3, i++)
# BEGIN
#     for (int j=0)
#
# for i in range(3):
#     for j in range(3):
#             print(i,"*",j,"=",i*j)
#  takes i = 0, j runs from 0-4,
#  then i is updated and then takes i=1 and runs j 1-4 again until i=4 and j=4

#Generating 3 random lists within a list
import random
matrix = [list(random.sample(range(10, 100), 5)),
list(random.sample(range(10, 100), 5)),
list(random.sample(range(10, 100), 5))]
print(matrix)

#### Exercise 25

# Write a program that uses nested loops to tackle the tasks:
# Sum up all entries of the matrix
# Search for the coordinates of maximal value of the matrix
# Describe the multiplication of the components of two matrix in a third resulting matrix

#### Sum up all entries of the matrix

#dumb way
# submatrix1=matrix[0]
# print(submatrix1)
# submatrix2=matrix[1]
# print(submatrix2)
# submatrix3=matrix[2]
# print(submatrix3)
#
# sum=0
# for i in submatrix1:
#      for j in submatrix2:
#         for k in submatrix3:
#             sum = sum + i + j + k
#
# print(sum)

# Much neater way
print("Sum up all entries of the matrix")
sum=0
for i in matrix[0]:
     for j in matrix[1]:
        for k in matrix[2]:
            sum = sum + i + j + k

print(sum)

print("Search for the coordinates of maximal value of the matrix")

max_value = None
for i in matrix[0]:
    if (max_value is None or i > max_value):
        max_value = i
        for j in matrix[1]:
            if (max_value is None or j > max_value):
                max_value = j
            for k in matrix[2]:
                if (max_value is None or k > max_value):
                    max_value = k

print('Maximum value:', max_value)
